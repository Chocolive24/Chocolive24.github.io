---
import {type ProjectSchema} from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";

export interface Props extends ProjectSchema {}

const { title, description, startDate, endDate, heroImage, state, infos = [], tags = [], relatedBlogs = [] } = Astro.props;
dayjs.extend(localizedFormat);
const displayStartDate = dayjs(startDate).format("ll")
const displayEndDate = endDate ? dayjs(endDate).format("ll") : "Present";
import { Image } from "astro:assets";

import { getCollection } from "astro:content";
import HorizontalCard from '../components/HorizontalCard.astro';
import createSlug from "../lib/createSlug"

export async function getStaticPaths() {
  const postEntries = await getCollection("blog");
  return postEntries.map((entry) => ({
    params: { slug: createSlug(entry.data.title, entry.slug) },
    props: { entry },
  }));
}

const blogs = await getCollection("blog");
---

<BaseLayout title={title} description={description} image={heroImage} ogType="article">
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      {heroImage && <Image width={750} height={422} format="webp" src={heroImage} alt={title} class="w-full mb-6" />}
      
      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      <time>{displayStartDate}</time> - <time>{displayEndDate}</time>
      <br />

      
      {/* Dynamic Badge Color Based on State */}
      {state && (
        <div 
          class={`badge my-1 ${state === "completed" ? "badge-success" : "badge-info"}`}
        >
          {state}
        </div>
      )}

        {/* Infos Section */}
           {infos && (
            <div class="flex items-center gap-4"> {/* Added gap for spacing between elements */}
              {Object.entries(infos).map(([icon, text]) => {
                return (
                  <div class="flex items-center gap-2" style="margin-top: 12px;">
                    {icon==="/icones/people.svg" && (
                      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="25" height="25" viewBox="0 0 256 256" xml:space="preserve">
                      <defs>
                      </defs>
                      <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" >
                        <path d="M 45 49.519 L 45 49.519 c -7.68 0 -13.964 -6.284 -13.964 -13.964 v -5.008 c 0 -7.68 6.284 -13.964 13.964 -13.964 h 0 c 7.68 0 13.964 6.284 13.964 13.964 v 5.008 C 58.964 43.236 52.68 49.519 45 49.519 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 52.863 51.438 c -2.362 1.223 -5.032 1.927 -7.863 1.927 s -5.501 -0.704 -7.863 -1.927 C 26.58 53.014 18.414 62.175 18.414 73.152 v 14.444 c 0 1.322 1.082 2.403 2.403 2.403 h 48.364 c 1.322 0 2.403 -1.082 2.403 -2.403 V 73.152 C 71.586 62.175 63.42 53.014 52.863 51.438 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 71.277 34.854 c -2.362 1.223 -5.032 1.927 -7.863 1.927 c -0.004 0 -0.007 0 -0.011 0 c -0.294 4.412 -2.134 8.401 -4.995 11.43 c 10.355 3.681 17.678 13.649 17.678 24.941 v 0.263 h 11.511 c 1.322 0 2.404 -1.082 2.404 -2.404 V 56.568 C 90 45.59 81.834 36.429 71.277 34.854 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 63.414 0 c -7.242 0 -13.237 5.589 -13.898 12.667 c 8 2.023 13.947 9.261 13.947 17.881 v 2.385 c 7.657 -0.027 13.914 -6.298 13.914 -13.961 v -5.008 C 77.378 6.284 71.094 0 63.414 0 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 13.915 73.152 c 0 -11.292 7.322 -21.261 17.677 -24.941 c -2.861 -3.029 -4.702 -7.019 -4.995 -11.43 c -0.004 0 -0.007 0 -0.011 0 c -2.831 0 -5.5 -0.704 -7.863 -1.927 C 8.166 36.429 0 45.59 0 56.568 v 14.444 c 0 1.322 1.082 2.404 2.404 2.404 h 11.511 V 73.152 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 26.536 32.932 v -2.385 c 0 -8.62 5.946 -15.858 13.947 -17.881 C 39.823 5.589 33.828 0 26.586 0 c -7.68 0 -13.964 6.284 -13.964 13.964 v 5.008 C 12.622 26.635 18.879 32.905 26.536 32.932 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                      </g>
                      </svg>
                      )
                    }
                    {icon==="/icones/clock.svg" && (
                      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="25" height="25" viewBox="0 0 256 256" xml:space="preserve">

                      <defs>
                      </defs>
                      <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" >
                        <path d="M 45 90 C 20.187 90 0 69.813 0 45 C 0 20.187 20.187 0 45 0 c 24.813 0 45 20.187 45 45 C 90 69.813 69.813 90 45 90 z M 45 6 C 23.495 6 6 23.495 6 45 s 17.495 39 39 39 s 39 -17.495 39 -39 S 66.505 6 45 6 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 70.794 42 H 48 V 19.206 c 0 -1.657 -1.343 -3 -3 -3 c -1.657 0 -3 1.343 -3 3 V 45 c 0 1.657 1.343 3 3 3 h 25.794 c 1.657 0 3 -1.343 3 -3 C 73.794 43.343 72.451 42 70.794 42 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                      </g>
                      </svg>
                      )
                    }
                    {icon==="/icones/tools.svg" && (
                      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="25" height="25" viewBox="0 0 256 256" xml:space="preserve">

                      <defs>
                      </defs>
                      <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" >
                        <path d="M 89.161 11.093 c -0.109 -0.329 -0.381 -0.578 -0.719 -0.658 c -0.334 -0.078 -0.692 0.02 -0.937 0.266 l -7.189 7.189 c -1.096 1.096 -2.553 1.7 -4.104 1.7 c -1.55 0 -3.007 -0.603 -4.104 -1.699 c -2.262 -2.263 -2.262 -5.944 0 -8.207 l 7.189 -7.189 c 0.245 -0.245 0.346 -0.6 0.266 -0.937 c -0.079 -0.337 -0.329 -0.609 -0.658 -0.719 c -5.863 -1.945 -12.216 -0.449 -16.57 3.906 c -4.463 4.462 -5.916 11.049 -3.792 16.948 L 21.693 58.544 c -5.897 -2.124 -12.485 -0.67 -16.948 3.792 C 0.39 66.691 -1.107 73.04 0.838 78.906 c 0.109 0.329 0.381 0.579 0.719 0.658 c 0.335 0.081 0.692 -0.021 0.937 -0.266 l 7.189 -7.189 c 2.261 -2.263 5.943 -2.263 8.207 0 c 1.096 1.096 1.699 2.553 1.699 4.104 s -0.603 3.007 -1.7 4.104 l -7.189 7.189 c -0.245 0.245 -0.346 0.599 -0.266 0.937 c 0.08 0.338 0.329 0.609 0.658 0.719 c 1.7 0.563 3.44 0.839 5.16 0.839 c 4.218 0 8.317 -1.652 11.41 -4.745 c 4.463 -4.463 5.917 -11.049 3.793 -16.948 l 36.851 -36.851 c 5.9 2.123 12.485 0.671 16.948 -3.793 C 89.611 23.309 91.107 16.959 89.161 11.093 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 72.088 57.275 c -0.177 -0.177 -0.413 -0.28 -0.662 -0.292 c -3.462 -0.155 -7.078 -1.876 -9.923 -4.721 c -1.742 -1.743 -3.065 -3.782 -3.863 -5.897 L 46.517 57.488 c 2.115 0.799 4.154 2.121 5.897 3.863 c 2.845 2.846 4.565 6.462 4.721 9.923 c 0.012 0.249 0.115 0.485 0.292 0.662 l 14.876 14.876 c 2.021 2.021 4.676 3.031 7.33 3.031 c 2.655 0 5.311 -1.01 7.331 -3.031 c 4.041 -4.042 4.041 -10.619 0 -14.661 L 72.088 57.275 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 5.351 14.171 c 0.123 0.219 0.324 0.384 0.563 0.462 l 5.82 1.89 l 23.869 23.869 l 4.638 -4.638 L 16.372 11.885 l -1.891 -5.82 c -0.078 -0.239 -0.243 -0.44 -0.462 -0.563 L 4.714 0.279 c -0.391 -0.219 -0.88 -0.151 -1.196 0.165 L 0.293 3.668 c -0.317 0.317 -0.384 0.806 -0.165 1.196 L 5.351 14.171 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                      </g>
                      </svg>
                      )
                    }
                    {icon==="/icones/calendar.svg" && (
                      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="25" height="25" viewBox="0 0 256 256" xml:space="preserve">

                      <defs>
                      </defs>
                      <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" >
                        <path d="M 65.122 13.164 H 24.877 c -1.104 0 -2 -0.896 -2 -2 s 0.896 -2 2 -2 h 40.245 c 1.104 0 2 0.896 2 2 S 66.227 13.164 65.122 13.164 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 88 30.453 H 2 c -1.104 0 -2 -0.896 -2 -2 v -9.082 C 0 13.743 4.579 9.164 10.207 9.164 h 6.55 c 1.104 0 2 0.896 2 2 s -0.896 2 -2 2 h -6.55 C 6.785 13.164 4 15.949 4 19.371 v 7.082 h 82 v -7.082 c 0 -3.422 -2.784 -6.207 -6.207 -6.207 h -6.55 c -1.104 0 -2 -0.896 -2 -2 s 0.896 -2 2 -2 h 6.55 C 85.421 9.164 90 13.743 90 19.371 v 9.082 C 90 29.557 89.104 30.453 88 30.453 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 47.932 89.102 H 10.207 C 4.579 89.102 0 84.522 0 78.895 V 28.453 c 0 -1.104 0.896 -2 2 -2 h 86 c 1.104 0 2 0.896 2 2 v 19.712 c 0 1.104 -0.896 2 -2 2 s -2 -0.896 -2 -2 V 30.453 H 4 v 48.442 c 0 3.423 2.785 6.207 6.207 6.207 h 37.725 c 1.104 0 2 0.896 2 2 S 49.036 89.102 47.932 89.102 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 23.255 53.637 h -4.876 c -2.577 0 -4.674 -2.097 -4.674 -4.674 v -4.875 c 0 -2.577 2.097 -4.674 4.674 -4.674 h 4.876 c 2.577 0 4.673 2.097 4.673 4.674 v 4.875 C 27.929 51.54 25.832 53.637 23.255 53.637 z M 18.379 43.414 c -0.372 0 -0.674 0.302 -0.674 0.674 v 4.875 c 0 0.371 0.302 0.674 0.674 0.674 h 4.876 c 0.371 0 0.673 -0.303 0.673 -0.674 v -4.875 c 0 -0.372 -0.302 -0.674 -0.673 -0.674 H 18.379 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 47.438 53.637 h -4.875 c -2.577 0 -4.674 -2.097 -4.674 -4.674 v -4.875 c 0 -2.577 2.097 -4.674 4.674 -4.674 h 4.875 c 2.577 0 4.674 2.097 4.674 4.674 v 4.875 C 52.111 51.54 50.015 53.637 47.438 53.637 z M 42.562 43.414 c -0.372 0 -0.674 0.302 -0.674 0.674 v 4.875 c 0 0.371 0.302 0.674 0.674 0.674 h 4.875 c 0.371 0 0.674 -0.303 0.674 -0.674 v -4.875 c 0 -0.372 -0.303 -0.674 -0.674 -0.674 H 42.562 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 23.255 74.665 h -4.876 c -2.577 0 -4.674 -2.097 -4.674 -4.674 v -4.875 c 0 -2.577 2.097 -4.674 4.674 -4.674 h 4.876 c 2.577 0 4.673 2.097 4.673 4.674 v 4.875 C 27.929 72.568 25.832 74.665 23.255 74.665 z M 18.379 64.442 c -0.372 0 -0.674 0.303 -0.674 0.674 v 4.875 c 0 0.371 0.302 0.674 0.674 0.674 h 4.876 c 0.371 0 0.673 -0.303 0.673 -0.674 v -4.875 c 0 -0.371 -0.302 -0.674 -0.673 -0.674 H 18.379 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 22.204 21.43 h -2.773 c -2.577 0 -4.674 -2.097 -4.674 -4.673 V 5.572 c 0 -2.577 2.097 -4.674 4.674 -4.674 h 2.773 c 2.577 0 4.674 2.097 4.674 4.674 v 11.185 C 26.877 19.333 24.781 21.43 22.204 21.43 z M 19.431 4.898 c -0.372 0 -0.674 0.302 -0.674 0.674 v 11.185 c 0 0.371 0.302 0.673 0.674 0.673 h 2.773 c 0.372 0 0.674 -0.302 0.674 -0.673 V 5.572 c 0 -0.372 -0.302 -0.674 -0.674 -0.674 H 19.431 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 70.569 21.43 h -2.773 c -2.577 0 -4.674 -2.097 -4.674 -4.673 V 5.572 c 0 -2.577 2.097 -4.674 4.674 -4.674 h 2.773 c 2.577 0 4.674 2.097 4.674 4.674 v 11.185 C 75.243 19.333 73.146 21.43 70.569 21.43 z M 67.796 4.898 c -0.371 0 -0.674 0.302 -0.674 0.674 v 11.185 c 0 0.371 0.303 0.673 0.674 0.673 h 2.773 c 0.371 0 0.674 -0.302 0.674 -0.673 V 5.572 c 0 -0.372 -0.303 -0.674 -0.674 -0.674 H 67.796 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 70.268 89.102 c -10.881 0 -19.732 -8.852 -19.732 -19.732 s 8.852 -19.732 19.732 -19.732 S 90 58.488 90 69.369 S 81.148 89.102 70.268 89.102 z M 70.268 53.637 c -8.675 0 -15.732 7.058 -15.732 15.732 s 7.058 15.732 15.732 15.732 S 86 78.044 86 69.369 S 78.942 53.637 70.268 53.637 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                        <path d="M 69.29 77.639 c -0.519 0 -1.019 -0.201 -1.393 -0.564 l -6.561 -6.363 c -0.793 -0.769 -0.813 -2.035 -0.043 -2.828 c 0.769 -0.793 2.036 -0.812 2.828 -0.043 l 4.968 4.818 l 7.36 -9.352 c 0.684 -0.867 1.94 -1.017 2.809 -0.334 c 0.867 0.683 1.018 1.94 0.334 2.809 l -8.731 11.095 c -0.35 0.444 -0.872 0.721 -1.438 0.758 C 69.379 77.637 69.334 77.639 69.29 77.639 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: currentColor; fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
                      </g>
                      </svg>
                      )
                    }
                    <span>{text}</span>
                  </div>
                );
              })}
            </div>
          )}

      {/* Tags Section */}
      {tags &&
        tags.map((tag) => (
          <a href={`/project/tag/${tag}`} class="badge badge-outline ml-2 no-underline" style="margin-top: 12px;">
            {tag}
          </a>
        ))
      }

      <div class="divider my-2"></div>
      <slot />
    </article>
  </main>
  
    {/* Fetch Related Blog Posts */}
{relatedBlogs && relatedBlogs.length > 0 && (
  <section class="max-w-[750px] mt-8">
    <h2 class="text-3xl font-bold mb-8">Related Blog Posts</h2>

    <div class="space-y-3">
      {relatedBlogs.map((post_title) => {
        // Find the post with a matching title from all_posts
        const relatedPost = blogs.find((post) => {
          return post.data.title === post_title;
        });

        // If the post exists, render it
        if (relatedPost) {
          return (
            <HorizontalCard
              key={relatedPost.data.slug}
              title={relatedPost.data.title}
              img={relatedPost.data.heroImage}
              desc={relatedPost.data.description}
              url={"/blog/" + createSlug(relatedPost.data.title, relatedPost.slug)}
              badge={relatedPost.data.badge}
              tags={relatedPost.data.tags}
            />
          );
        } else {
          return null; // If no match is found, render nothing
        }
      })}
    </div>
  </section>
)}
  
</BaseLayout>

